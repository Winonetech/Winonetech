<?xml version="1.0" encoding="utf-8"?>
<s:BorderContainer xmlns:fx="http://ns.adobe.com/mxml/2009"
				   xmlns:s ="library://ns.adobe.com/flex/spark"
				   xmlns:mx="library://ns.adobe.com/flex/mx"
				   xmlns:pr="com.winonetech.components.progress.*"
				   mouseChildren="false" mouseEnabled="false"
				   width="250" cornerRadius="5">
	
	<s:layout>
		<s:VerticalLayout paddingLeft="10" paddingRight="10"
						  paddingBottom="10" paddingTop="10"
						  horizontalAlign="center"/>
	</s:layout>
	
	<s:states>
		<s:State name="loading"/>
		<s:State name="finish"/>
	</s:states>
	
	<s:Label width="100%"
			 color="0"
			 maxDisplayedLines="1"
			 fontSize="20"
			 text="{title}"
			 textAlign="center"/>
	
	<s:List width="100%" height="100%" enabled="false"
			dataProvider="{list}" includeIn="loading"
			skinClass="com.winonetech.skins.DisabledListSkin">
		<s:itemRenderer>
			<fx:Component>
				<pr:ProgressItem/>
			</fx:Component>
		</s:itemRenderer>
	</s:List>
	
	<s:Label includeIn="finish" color="0" text="{message}" width="100%"/>
	
	<mx:ProgressBar width="100%" includeIn="finish"
					label="" id="bar" indeterminate="true"
					trackSkin="com.winonetech.skins.ProgressBarTrackSkin"
					barSkin="com.winonetech.skins.ProgressBarScrubSkin"/>
	
	<fx:Script>
		<![CDATA[
			import cn.vision.collections.Map;
			import cn.vision.consts.FileTypeConsts;
			import cn.vision.events.pattern.CommandEvent;
			import cn.vision.utils.FileUtil;
			import cn.vision.utils.LogUtil;
			
			import com.winonetech.core.wt;
			import com.winonetech.tools.Cache;
			
			import mx.collections.ArrayCollection;
			
			
			/**
			 * 
			 * 开始进度演示。
			 * 
			 */
			
			public function play():void
			{
				if(!playing)
				{
					playing = true;
					processPlay();
				}
			}
			
			
			/**
			 * 
			 * 停止进度演示。
			 * 
			 */
			
			public function stop():void
			{
				if (playing)
				{
					playing = false;
					processStop();
				}
			}
			
			
			/**
			 * @private
			 */
			protected function processPlay():void
			{
				list.removeAll();
				pushCaches();
			}
			
			/**
			 * @private
			 */
			protected function processStop():void
			{
				
			}
			
			
			/**
			 * @private
			 */
			private function pushCaches():void
			{
				if (data)
				{
					if (data.length > 0)
					{
						title = "剩余下载 " + data.length + ", 请稍后...";
						if (playing)
						{
							var keys:Array = [];
							for (var key:String in data) keys.push(key);
							var l:int = keys.length;
							
							for (var i:int = 0; i < l; i++)
							{
								key = keys[i];
								if (list.length < 3)
								{
									var cache:Cache = data[key];
									
									var ext:String = FileUtil.getFileTypeByURL(cache.saveURL);
									if (ext != FileTypeConsts.MP4 && ext != FileTypeConsts.FLV)
									{
										//如果不是视频
										LogUtil.log("优先缓存：" + cache.saveURL + " 剩余：" + data.length);
										
										Cache.shift(cache);
									}
									else
									{
										//是视频，且队列后面仍有图片
										if (checkHasImage(keys, i)) continue;
									}
									cache.addEventListener(CommandEvent.COMMAND_END, handlerCacheEnd);
									if (list.getItemIndex(cache) == -1) list.addItem(cache);
								} else break;
							}
						}
					}
					else
					{
						title = "请稍后...";
						currentState = "finish";
					}
				}
			}
			
			
			/**
			 * @private
			 */
			private function handlerCacheEnd($e:CommandEvent):void
			{
				var cache:Cache = $e.command as Cache;
				if (cache)
				{
					cache.removeEventListener(CommandEvent.COMMAND_END, handlerCacheEnd);
					var index:uint = list.getItemIndex(cache);
					if (index>= 0)   list.removeItemAt(index);
				}
				
				pushCaches();
			}
			
			
			/**
			 * @private
			 */
			private static function checkHasImage($array:Array, $flag:uint):Boolean
			{
				if ($array)
				{
					var l:uint = $array.length;
					for (var i:uint = $flag; i < l; i++)
					{
						var ext:String = FileUtil.getFileTypeByURL($array[i]);
						if (ext != FileTypeConsts.MP4 && ext != FileTypeConsts.FLV) return true;
					}
				}
				return false;
			}
			
			
			/**
			 * 
			 * 需要演示的进度下载的Cache集合。
			 * 
			 */
			[Bindable]
			public function get data():Map
			{
				return wt::data;
			}
			
			/**
			 * @private
			 */
			public function set data($value:Map):void
			{
				wt::data = $value;
				
				playing && processPlay();
			}
			
			
			/**
			 * 
			 * 显示消息。
			 * 
			 */
			
			[Bindable]
			public var message:String;
			
			
			/**
			 * 
			 * 显示标题。
			 * 
			 */
			
			[Bindable]
			public var title:String;
			
			/**
			 * @private
			 */
			private var playing:Boolean;
			
			
			/**
			 * @private
			 */
			[Bindable]
			private var list:ArrayCollection = new ArrayCollection;
			
			/**
			 * @private
			 */
			[Bindable]
			private var length:uint;
			
			
			/**
			 * @private
			 */
			wt var data:Map;
			
		]]>
	</fx:Script>
</s:BorderContainer>
